# ==== CONFIGURATION ====
$GitHubUser = "your-org-or-username"     # Replace with GitHub org or user
$IsOrg = $true                           # Set to $false if it's a user, not an org
$Token = "ghp_xxxxxxxxxxxxxxxxxxxxxxxxx" # Optional: GitHub personal access token

# ==== HEADERS & API BASE ====
$Headers = if ($Token) { @{ Authorization = "token $Token" } } else { @{} }
$ApiBase = "https://api.github.com"
$ReposBaseUrl = if ($IsOrg) { "$ApiBase/orgs/$GitHubUser/repos" } else { "$ApiBase/users/$GitHubUser/repos" }

# ==== PAGINATED REPO FETCH ====
function Get-AllRepos {
    $page = 1
    $allRepos = @()

    do {
        $url = "$ReposBaseUrl?per_page=100&page=$page"
        Write-Host "Fetching page $page: $url"
        $response = Invoke-RestMethod -Uri $url -Headers $Headers -ErrorAction Stop
        $allRepos += $response
        $page++
    } while ($response.Count -eq 100)

    return $allRepos
}

# ==== MAIN SCRIPT ====
$outputFile = "GitHubReposAndContributors.csv"
@() | Export-Csv -Path $outputFile -NoTypeInformation  # Clear file

$repos = Get-AllRepos

foreach ($repo in $repos) {
    $repoName = $repo.name
    $contributorsUrl = "$ApiBase/repos/$GitHubUser/$repoName/contributors?per_page=100"
    Write-Host "Getting contributors for: $repoName"

    try {
        $contributors = Invoke-RestMethod -Uri $contributorsUrl -Headers $Headers -ErrorAction Stop
        foreach ($contributor in $contributors) {
            [PSCustomObject]@{
                Repository    = $repoName
                Contributor   = $contributor.login
                Contributions = $contributor.contributions
            } | Export-Csv -Path $outputFile -Append -NoTypeInformation
        }
    } catch {
        Write-Warning "Failed to get contributors for $repoName"
    }
}

Write-Output "âœ… Done! Output saved to: $outputFile"
