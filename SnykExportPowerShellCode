param(
  [Parameter(Mandatory=$true)]
  [ValidateSet('org','group')]
  [string]$Scope,                         # 'org' or 'group'

  [Parameter(Mandatory=$true)]
  [string]$Id,                            # Org ID or Group ID (UUID)

  [Parameter(Mandatory=$true)]
  [string]$OutDir,                        # Local folder to save CSVs

  [string]$ApiBase = "https://api.snyk.io",  # Change if using regional base
  [string]$ApiVersion = "2024-10-15",        # Snyk recommends this version
  [switch]$UseBearerToken                   # Use if your token is OAuth2
)

# -------------------------
# 1) Read token & headers
# -------------------------
$token = $env:SNYK_TOKEN
if ([string]::IsNullOrWhiteSpace($token)) {
  throw "Set your token first: `$env:SNYK_TOKEN = 'xxxxxxxx...'"
}

# Snyk accepts either "Authorization: token <API_TOKEN>" or "Authorization: bearer <access_token>".
# Choose based on -UseBearerToken switch. :contentReference[oaicite:1]{index=1}
$authHeader = if ($UseBearerToken) { "bearer $token" } else { "token $token" }

$commonHeaders = @{
  "Authorization" = $authHeader
  "Content-Type"  = "application/vnd.api+json"
  "Accept"        = "application/vnd.api+json"
}

# -------------------------
# 2) Build endpoints
# -------------------------
if ($Scope -eq 'org') {
  $postUrl    = "$ApiBase/rest/orgs/$Id/export?version=$ApiVersion"
  $statusUrlT = "$ApiBase/rest/orgs/$Id/jobs/export/{0}?version=$ApiVersion"
  $resultUrlT = "$ApiBase/rest/orgs/$Id/export/{0}?version=$ApiVersion"
} else {
  $postUrl    = "$ApiBase/rest/groups/$Id/export?version=$ApiVersion"
  $statusUrlT = "$ApiBase/rest/groups/$Id/jobs/export/{0}?version=$ApiVersion"
  $resultUrlT = "$ApiBase/rest/groups/$Id/export/{0}?version=$ApiVersion"
}

# -------------------------
# 3) Define export request
# -------------------------
# Minimal example: dataset=issues, formats=csv. You can add columns/filters per docs. :contentReference[oaicite:2]{index=2}
$body = @{
  data = @{
    type = "resource"
    attributes = @{
      dataset = "issues"
      formats = @("csv")
      # Optional: columns = @("ISSUE_SEVERITY","SCORE","PROJECT_NAME","CVE")
      # Optional: filters = @{
      #   introduced = @{ from = "2025-01-01T00:00:00Z"; to = "2025-08-21T23:59:59Z" }
      #   lifecycle  = @("PRODUCTION")
      #   environment= @("BACKEND")
      #   orgs       = @("<org-uuid-1>","<org-uuid-2>") # group scope only
      # }
    }
  }
} | ConvertTo-Json -Depth 10

# -------------------------
# 4) Start export job
# -------------------------
Write-Host "Starting export..." -ForegroundColor Cyan
$start = Invoke-RestMethod -Method POST -Uri $postUrl -Headers $commonHeaders -Body $body
$exportId = $start.data.id
if (-not $exportId) { throw "Failed to get export_id from start response." }

# -------------------------
# 5) Poll for completion
# -------------------------
$statusUrl = [string]::Format($statusUrlT, $exportId)
$timeoutSec = 900   # 15 minutes
$pollSec    = 5
$sw = [Diagnostics.Stopwatch]::StartNew()
$status = $null

Write-Host "Polling export status (every $pollSec s)..." -ForegroundColor Cyan
do {
  Start-Sleep -Seconds $pollSec
  $status = Invoke-RestMethod -Method GET -Uri $statusUrl -Headers $commonHeaders
  $state  = $status.data.attributes.status
  Write-Host ("Status: {0}" -f $state)
  if ($state -eq "ERROR") { throw "Export failed." }
  if ($sw.Elapsed.TotalSeconds -gt $timeoutSec) { throw "Timed out waiting for export." }
} while ($state -ne "FINISHED")

# -------------------------
# 6) Get results (presigned CSV URL(s))
# -------------------------
$resultUrl = [string]::Format($resultUrlT, $exportId)
$results = Invoke-RestMethod -Method GET -Uri $resultUrl -Headers $commonHeaders
# Response includes list of results with signed URLs. :contentReference[oaicite:3]{index=3}
$files = @()
foreach ($r in $results.data.attributes.results) {
  # Each result entry typically includes a URL and a filename; adjust keys if your account returns different names.
  $url  = $r.url
  $name = if ($r.filename) { $r.filename } else { ("snyk-export-{0}.csv" -f ([guid]::NewGuid())) }
  if ($url) { $files += [PSCustomObject]@{ Url=$url; Name=$name } }
}

if (-not (Test-Path $OutDir)) { New-Item -ItemType Directory -Path $OutDir | Out-Null }

# -------------------------
# 7) Download CSV file(s)
# -------------------------
foreach ($f in $files) {
  $dest = Join-Path $OutDir $f.Name
  Write-Host "Downloading $($f.Name)..." -ForegroundColor Green
  # Results links are already signed; do NOT send Authorization here.
  Invoke-WebRequest -Uri $f.Url -OutFile $dest
}

Write-Host "Done. Files saved to $OutDir" -ForegroundColor Green
