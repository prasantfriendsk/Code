$API_TOKEN = "Test"
$nas = "C:\Users\z383759\OneDrive - Thrivent\Work\Vulnerability Service Now DS\"
$CSV_FILE = Join-Path $nas "Vulnerable.csv"
$API_URL = "https://thrivent.service-now.com/api/now/table/sn_vul_vulnerable_item"
$BATCH_SIZE = 15000
$OFFSET = 0

$HEADERS = @{
    "Accept"        = "application/json"
    "Authorization" = "Bearer $API_TOKEN"
}

$Fields = "number,vulnerability,vulnerability.ref_sn_vul_third_party_entry.cves_list,vulnerability.name,risk_score,risk_rating,cmdb_ci,cmdb_ci.sys_class_name,state,sys_created_on,last_found,ttr_target_date,ttr_status,assignment_rule,assignment_group,assigned_to,u_remediation_task_groups,source,assignment_type,assignment_group.manager.x_thfl_sprsrvygor_supervisory_organization.managed_by.manager,vulnerability.epss_score,vulnerability.exploit,age_duration,age_closed,source_risk_score,closed_at,x_wiz_vul_fixable,last_opened,defer_count,ignore_date,ignore_reason,description"

$FirstPass = $true
$Query = 'sys_created_onBETWEENjavascript:gs.dateGenerate("2020-01-01","00:00:00")@javascript:gs.dateGenerate("2021-01-01","00:00:00")^ORDERBYnumber'

function _enc([string]$s) {
    return [System.Web.HttpUtility]::UrlEncode($s)
}

function Escape-CsvField {
    param($value)
    if ($null -eq $value) { return "" }
    # Replace newlines and carriage returns with spaces
    $escaped = $value -replace "(`r`n|`r|`n)", " "
    # Escape double quotes by doubling them
    $escaped = $escaped -replace '"', '""'
    return '"' + $escaped + '"'
}

while ($true) {
    Write-Host "Fetching records $OFFSET to $($OFFSET + $BATCH_SIZE - 1)..."

    $params = @{
        "sysparm_limit"          = $BATCH_SIZE
        "sysparm_offset"         = $OFFSET
        "sysparm_fields"         = $Fields
        "sysparm_display_value"  = "true"
        "sysparm_query"          = "active=true"
    }

    $qs = @{
        "sysparm_limit"         = "$BATCH_SIZE"
        "sysparm_offset"        = "$OFFSET"
        "sysparm_fields"        = "$(_enc($Fields -join ','))"
        "sysparm_display_value" = "true"
    }

    if ($Query) {
        $qs += @{ "sysparm_query" = _enc($Query) }
    }

    $queryString = ($qs.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join "&"
    $requestUrl = "$API_URL?$queryString"

    try {
        $response = Invoke-RestMethod -Method Get -Uri $requestUrl -Headers $HEADERS -Body $null -ContentType "application/json" -ErrorAction Stop -Verbose:$false -TimeoutSec 60
    } catch {
        Write-Host "Error fetching data: $_"
        break
    }

    $data = $response.result

    if (-not $data -or $data.Count -eq 0) {
        Write-Host "No more records to fetch."
        break
    }

    $cleanedData = @()
    foreach ($record in $data) {
        $flatRecord = @{}
        foreach ($field in $record.PSObject.Properties) {
            if ($field.Value -is [System.Collections.IDictionary] -and $field.Value.ContainsKey("display_value")) {
                $val = $field.Value.display_value
            } else {
                $val = $field.Value
            }

            # Sanitize fields like 'description' or others prone to multiline text
            if ($field.Name -in @("description")) {
                if ($val) {
                    $val = $val -replace "(`r`n|`r|`n)", " "
                    $val = $val -replace '"', '""'
                }
            }

            $flatRecord[$field.Name] = $val
        }
        $cleanedData += (New-Object PSObject -Property $flatRecord)
    }

    if ($FirstPass) {
        # Write header line
        ($cleanedData[0].PSObject.Properties.Name | ForEach-Object { '"' + $_ + '"' }) -join "," | Out-File -FilePath $CSV_FILE -Encoding utf8
        $FirstPass = $false
    }

    # Write each record sanitized
    foreach ($record in $cleanedData) {
        $line = $record.PSObject.Properties | ForEach-Object {
            Escape-CsvField $_.Value
        } -join ","
        Add-Content -Path $CSV_FILE -Value $line -Encoding utf8
    }

    Write-Host "Fetched and saved $($cleanedData.Count) records."
    $OFFSET += $BATCH_SIZE
    Start-Sleep -Seconds 5
}
