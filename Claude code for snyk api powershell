# Snyk Data Extractor - Simple API Approach
# Uses basic API calls to troubleshoot connectivity issues

param(
    [Parameter(Mandatory=$true)]
    [string]$ApiToken,
    
    [Parameter(Mandatory=$false)]
    [string]$OrgId,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputPath = "."
)

# Different API base URLs to try
$ApiUrls = @{
    "LegacyV1" = "https://snyk.io/api/v1"
    "ApiV1" = "https://api.snyk.io/v1"  
    "RestApi" = "https://api.snyk.io/rest"
}

# Standard headers
$Headers = @{
    "Authorization" = "token $ApiToken"
    "Content-Type" = "application/json"
}

$RestHeaders = @{
    "Authorization" = "token $ApiToken"
    "Content-Type" = "application/vnd.api+json"
}

# Function to test different API endpoints
function Test-AllAPIEndpoints {
    Write-Host "=== Testing API Endpoints ===" -ForegroundColor Cyan
    
    $workingEndpoints = @()
    
    # Test user endpoint on different bases
    foreach ($name in $ApiUrls.Keys) {
        $baseUrl = $ApiUrls[$name]
        Write-Host "Testing $name ($baseUrl)..." -ForegroundColor Yellow
        
        try {
            if ($name -eq "RestApi") {
                # REST API has different structure
                $testUrl = "$baseUrl/orgs?version=2021-06-04&limit=10"
                $response = Invoke-RestMethod -Uri $testUrl -Headers $RestHeaders -Method GET -TimeoutSec 10
                Write-Host "✓ $name REST endpoint working" -ForegroundColor Green
                $workingEndpoints += @{ Name = $name; Type = "REST"; BaseUrl = $baseUrl }
            } else {
                # Try user/me endpoint
                $testUrl = "$baseUrl/user/me"
                $response = Invoke-RestMethod -Uri $testUrl -Headers $Headers -Method GET -TimeoutSec 10
                Write-Host "✓ $name working - User: $($response.username)" -ForegroundColor Green
                $workingEndpoints += @{ Name = $name; Type = "Standard"; BaseUrl = $baseUrl }
            }
        } catch {
            Write-Host "✗ $name failed: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    return $workingEndpoints
}

# Function to get organizations from working endpoint
function Get-OrgsFromEndpoint {
    param($Endpoint)
    
    Write-Host "Getting organizations from $($Endpoint.Name)..." -ForegroundColor Yellow
    
    try {
        if ($Endpoint.Type -eq "REST") {
            $url = "$($Endpoint.BaseUrl)/orgs?version=2021-06-04&limit=100"
            $response = Invoke-RestMethod -Uri $url -Headers $RestHeaders -Method GET
            
            if ($response.data) {
                $orgs = @()
                foreach ($org in $response.data) {
                    $orgs += [PSCustomObject]@{
                        id = $org.id
                        name = $org.attributes.name
                        api_type = "REST"
                    }
                }
                return $orgs
            }
        } else {
            $url = "$($Endpoint.BaseUrl)/orgs"
            $response = Invoke-RestMethod -Uri $url -Headers $Headers -Method GET
            
            if ($response.orgs) {
                foreach ($org in $response.orgs) {
                    $org | Add-Member -NotePropertyName "api_type" -NotePropertyValue "Standard"
                }
                return $response.orgs
            }
        }
    } catch {
        Write-Error "Failed to get orgs from $($Endpoint.Name): $($_.Exception.Message)"
    }
    
    return @()
}

# Function to get projects using different methods
function Get-ProjectsFromEndpoint {
    param($Endpoint, $OrgId)
    
    Write-Host "Getting projects from $($Endpoint.Name) for org $OrgId..." -ForegroundColor Yellow
    
    $projects = @()
    
    try {
        if ($Endpoint.Type -eq "REST") {
            # REST API approach
            $url = "$($Endpoint.BaseUrl)/orgs/$OrgId/projects?version=2021-06-04&limit=100"
            $response = Invoke-RestMethod -Uri $url -Headers $RestHeaders -Method GET
            
            if ($response.data) {
                foreach ($project in $response.data) {
                    $projects += [PSCustomObject]@{
                        id = $project.id
                        name = $project.attributes.name
                        origin = $project.attributes.origin
                        type = $project.attributes.type
                        created = $project.attributes.created
                        api_source = $Endpoint.Name
                    }
                }
            }
        } else {
            # Standard API approach - try different URL patterns
            $urlPatterns = @(
                "$($Endpoint.BaseUrl)/org/$OrgId/projects",
                "$($Endpoint.BaseUrl)/orgs/$OrgId/projects"
            )
            
            foreach ($url in $urlPatterns) {
                try {
                    Write-Host "  Trying: $url" -ForegroundColor Gray
                    $response = Invoke-RestMethod -Uri $url -Headers $Headers -Method GET
                    
                    if ($response.projects) {
                        foreach ($project in $response.projects) {
                            $projects += [PSCustomObject]@{
                                id = $project.id
                                name = $project.name
                                origin = $project.origin
                                type = $project.type
                                created = $project.created
                                api_source = $Endpoint.Name
                            }
                        }
                        break  # Success, no need to try other patterns
                    }
                } catch {
                    Write-Host "    Failed: $($_.Exception.Message)" -ForegroundColor Red
                    continue
                }
            }
        }
        
    } catch {
        Write-Error "Failed to get projects: $($_.Exception.Message)"
    }
    
    return $projects
}

# Function to get issues for projects
function Get-IssuesForProjects {
    param($Endpoint, $OrgId, $Projects)
    
    if ($Projects.Count -eq 0) {
        return @()
    }
    
    Write-Host "Getting issues for $($Projects.Count) projects..." -ForegroundColor Yellow
    
    $allIssues = @()
    $successCount = 0
    
    foreach ($project in $Projects[0..([Math]::Min(10, $Projects.Count-1))]) {  # Limit to first 10 projects for testing
        Write-Host "  Processing: $($project.name)" -ForegroundColor Green
        
        try {
            # Try different URL patterns for issues
            $urlPatterns = @(
                "$($Endpoint.BaseUrl)/org/$OrgId/project/$($project.id)/issues",
                "$($Endpoint.BaseUrl)/orgs/$OrgId/projects/$($project.id)/issues"
            )
            
            foreach ($url in $urlPatterns) {
                try {
                    $response = Invoke-RestMethod -Uri $url -Headers $Headers -Method GET -TimeoutSec 30
                    
                    if ($response.issues) {
                        foreach ($issue in $response.issues) {
                            $allIssues += [PSCustomObject]@{
                                id = $issue.id
                                title = $issue.title
                                type = $issue.type
                                severity = $issue.severity
                                package = $issue.package
                                version = $issue.version
                                is_patchable = $issue.isPatchable
                                is_upgradable = $issue.isUpgradable
                                cvss_score = $issue.cvssScore
                                project_id = $project.id
                                project_name = $project.name
                                api_source = $Endpoint.Name
                            }
                        }
                        $successCount++
                        Write-Host "    Found $($response.issues.Count) issues" -ForegroundColor White
                        break
                    }
                } catch {
                    continue
                }
            }
            
            Start-Sleep -Milliseconds 100
            
        } catch {
            Write-Warning "Failed to get issues for $($project.name): $($_.Exception.Message)"
        }
    }
    
    Write-Host "Successfully processed $successCount/$($Projects.Count) projects" -ForegroundColor Green
    return $allIssues
}

# Function to save to CSV
function Save-ToCSV {
    param([array]$Data, [string]$FileName)
    
    if ($Data.Count -eq 0) {
        Write-Warning "No data to save for $FileName"
        return
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $filePath = Join-Path $OutputPath "$FileName`_$timestamp.csv"
    
    try {
        $Data | Export-Csv -Path $filePath -NoTypeInformation -Encoding UTF8
        Write-Host "Saved $($Data.Count) records to: $filePath" -ForegroundColor Green
    } catch {
        Write-Error "Failed to save CSV: $($_.Exception.Message)"
    }
}

# Main execution
Write-Host "=== Snyk API Diagnostics and Data Extraction ===" -ForegroundColor Cyan
Write-Host "Token: $($ApiToken.Substring(0,10))..." -ForegroundColor Gray

# Create output directory
if (!(Test-Path $OutputPath)) {
    New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null
}

# Step 1: Test all API endpoints
$workingEndpoints = Test-AllAPIEndpoints

if ($workingEndpoints.Count -eq 0) {
    Write-Error "No working API endpoints found. Please check your API token."
    exit 1
}

Write-Host "`nFound $($workingEndpoints.Count) working endpoint(s)" -ForegroundColor Green

# Step 2: Get organizations from working endpoints
$allOrgs = @()
foreach ($endpoint in $workingEndpoints) {
    $orgs = Get-OrgsFromEndpoint -Endpoint $endpoint
    $allOrgs += $orgs
}

if ($allOrgs.Count -eq 0) {
    Write-Error "No organizations found from any endpoint"
    exit 1
}

Write-Host "`nAvailable organizations:" -ForegroundColor Yellow
$allOrgs | ForEach-Object { 
    Write-Host "  - $($_.name) (ID: $($_.id)) [via $($_.api_type)]" -ForegroundColor White 
}

# Step 3: Select organization
if (-not $OrgId) {
    if ($allOrgs.Count -eq 1) {
        $selectedOrg = $allOrgs[0]
        $OrgId = $selectedOrg.id
        Write-Host "`nUsing organization: $($selectedOrg.name)" -ForegroundColor Green
    } else {
        Write-Host "`nMultiple organizations found. Please specify -OrgId:" -ForegroundColor Yellow
        $allOrgs | ForEach-Object { 
            Write-Host "  -OrgId '$($_.id)' # $($_.name)" -ForegroundColor White 
        }
        exit 1
    }
} else {
    $selectedOrg = $allOrgs | Where-Object { $_.id -eq $OrgId }
    if (-not $selectedOrg) {
        Write-Error "Organization ID '$OrgId' not found"
        exit 1
    }
    Write-Host "`nUsing specified organization: $($selectedOrg.name)" -ForegroundColor Green
}

# Step 4: Find working endpoint for this org type
$workingEndpoint = $workingEndpoints | Where-Object { $_.Type -eq $selectedOrg.api_type }
if (-not $workingEndpoint) {
    $workingEndpoint = $workingEndpoints[0]  # Use first working endpoint
}

Write-Host "Using API endpoint: $($workingEndpoint.Name)" -ForegroundColor Cyan

# Step 5: Get projects
Write-Host "`n--- Extracting Projects ---" -ForegroundColor Magenta
$projects = Get-ProjectsFromEndpoint -Endpoint $workingEndpoint -OrgId $OrgId

if ($projects.Count -gt 0) {
    Write-Host "Found $($projects.Count) projects" -ForegroundColor Green
    Save-ToCSV -Data $projects -FileName "snyk_projects"
    
    # Step 6: Get issues
    Write-Host "`n--- Extracting Issues (Sample) ---" -ForegroundColor Magenta
    $issues = Get-IssuesForProjects -Endpoint $workingEndpoint -OrgId $OrgId -Projects $projects
    
    if ($issues.Count -gt 0) {
        Save-ToCSV -Data $issues -FileName "snyk_issues"
    }
} else {
    Write-Warning "No projects found"
}

Write-Host "`n=== Summary ===" -ForegroundColor Cyan
Write-Host "Working endpoints: $($workingEndpoints.Count)" -ForegroundColor Green
Write-Host "Organizations: $($allOrgs.Count)" -ForegroundColor Green  
Write-Host "Projects: $($projects.Count)" -ForegroundColor Green
Write-Host "Issues: $(if($issues) {$issues.Count} else {0})" -ForegroundColor Green
