# Fixed Snyk Projects and Issues CSV Extractor
# Uses REST API v1 with proper error handling and pagination

param(
    [Parameter(Mandatory=$true)]
    [string]$ApiToken,
    
    [Parameter(Mandatory=$false)]
    [string]$OrgId,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputPath = "."
)

# API URLs
$RestBaseUrl = "https://api.snyk.io/v1"

# Headers for API requests
$Headers = @{
    "Authorization" = "token $ApiToken"
    "Content-Type" = "application/json"
}

# Function to test API connectivity
function Test-SnykAPI {
    try {
        Write-Host "Testing API connectivity..." -ForegroundColor Yellow
        $response = Invoke-RestMethod -Uri "$RestBaseUrl/user/me" -Headers $Headers -Method GET
        Write-Host "API connection successful. User: $($response.username)" -ForegroundColor Green
        return $true
    } catch {
        Write-Error "API connection failed: $($_.Exception.Message)"
        return $false
    }
}

# Function to get organizations with error handling
function Get-Organizations {
    try {
        Write-Host "Retrieving organizations..." -ForegroundColor Yellow
        $response = Invoke-RestMethod -Uri "$RestBaseUrl/orgs" -Headers $Headers -Method GET
        
        if ($response.orgs -and $response.orgs.Count -gt 0) {
            Write-Host "Found $($response.orgs.Count) organization(s):" -ForegroundColor Green
            foreach ($org in $response.orgs) {
                Write-Host "  - $($org.name) (ID: $($org.id))" -ForegroundColor White
            }
            return $response.orgs
        } else {
            Write-Warning "No organizations found"
            return @()
        }
    } catch {
        Write-Error "Failed to retrieve organizations: $($_.Exception.Message)"
        return @()
    }
}

# Function to get projects with pagination using REST API only
function Get-AllProjects {
    param([string]$OrganizationId)
    
    Write-Host "Retrieving projects for organization: $OrganizationId" -ForegroundColor Yellow
    
    $allProjects = @()
    $page = 1
    $perPage = 100
    
    do {
        try {
            $url = "$RestBaseUrl/org/$OrganizationId/projects?perPage=$perPage&page=$page"
            Write-Host "Fetching projects page $page..." -ForegroundColor Green
            
            $response = Invoke-RestMethod -Uri $url -Headers $Headers -Method GET
            
            if ($response.projects) {
                $allProjects += $response.projects
                Write-Host "Page $page : Retrieved $($response.projects.Count) projects" -ForegroundColor Green
                
                # Check if we got fewer results than requested (last page)
                $hasMore = $response.projects.Count -eq $perPage
            } else {
                $hasMore = $false
            }
            
            $page++
            Start-Sleep -Milliseconds 300  # Rate limiting
            
        } catch {
            Write-Warning "Error fetching projects page $page : $($_.Exception.Message)"
            break
        }
        
    } while ($hasMore)
    
    Write-Host "Total projects retrieved: $($allProjects.Count)" -ForegroundColor Green
    return $allProjects
}

# Function to get issues for all projects using REST API
function Get-AllIssues {
    param(
        [string]$OrganizationId,
        [array]$Projects
    )
    
    Write-Host "Retrieving issues for $($Projects.Count) projects..." -ForegroundColor Yellow
    
    $allIssues = @()
    $projectCount = 0
    
    foreach ($project in $Projects) {
        $projectCount++
        Write-Host "Processing project $projectCount/$($Projects.Count): $($project.name)" -ForegroundColor Green
        
        try {
            $url = "$RestBaseUrl/org/$OrganizationId/project/$($project.id)/issues"
            $response = Invoke-RestMethod -Uri $url -Headers $Headers -Method GET
            
            if ($response.issues) {
                foreach ($issue in $response.issues) {
                    # Add project information to each issue
                    $issue | Add-Member -NotePropertyName "projectId" -NotePropertyValue $project.id
                    $issue | Add-Member -NotePropertyName "projectName" -NotePropertyValue $project.name
                    $issue | Add-Member -NotePropertyName "projectOrigin" -NotePropertyValue $project.origin
                    $issue | Add-Member -NotePropertyName "projectType" -NotePropertyValue $project.type
                    $issue | Add-Member -NotePropertyName "projectCreated" -NotePropertyValue $project.created
                    $allIssues += $issue
                }
                Write-Host "  Found $($response.issues.Count) issues" -ForegroundColor White
            } else {
                Write-Host "  No issues found" -ForegroundColor Gray
            }
            
            Start-Sleep -Milliseconds 200  # Rate limiting
            
        } catch {
            Write-Warning "Error fetching issues for project $($project.name): $($_.Exception.Message)"
            continue
        }
    }
    
    Write-Host "Total issues retrieved: $($allIssues.Count)" -ForegroundColor Green
    return $allIssues
}

# Function to convert projects to CSV format
function ConvertTo-ProjectCSV {
    param([array]$Projects)
    
    $csvData = @()
    foreach ($project in $Projects) {
        $csvData += [PSCustomObject]@{
            ProjectId = $project.id
            ProjectName = $project.name
            Origin = $project.origin
            Type = $project.type
            Created = $project.created
            IsMonitored = $project.isMonitored
            TotalDependencies = $project.totalDependencies
            CriticalIssues = $project.issueCountsBySeverity.critical
            HighIssues = $project.issueCountsBySeverity.high
            MediumIssues = $project.issueCountsBySeverity.medium
            LowIssues = $project.issueCountsBySeverity.low
            RemoteRepoUrl = $project.remoteRepoUrl
            LastTestedDate = $project.lastTestedDate
            BrowseUrl = $project.browseUrl
        }
    }
    return $csvData
}

# Function to convert issues to CSV format
function ConvertTo-IssueCSV {
    param([array]$Issues)
    
    $csvData = @()
    foreach ($issue in $Issues) {
        $csvData += [PSCustomObject]@{
            IssueId = $issue.id
            Title = $issue.title
            Type = $issue.type
            Severity = $issue.severity
            Priority = $issue.priorityScore
            Package = $issue.package
            Version = $issue.version
            Language = $issue.language
            PackageManager = $issue.packageManager
            IsPatchable = $issue.isPatchable
            IsUpgradable = $issue.isUpgradable
            FixedIn = ($issue.fixedIn -join "; ")
            UpgradePath = if ($issue.upgradePath) { ($issue.upgradePath -join " -> ") } else { "" }
            CvssScore = $issue.cvssScore
            CvssVector = $issue.CVSSv3
            DisclosureTime = $issue.disclosureTime
            PublicationTime = $issue.publicationTime
            IntroducedDate = $issue.introducedDate
            Credit = ($issue.credit -join "; ")
            ProjectId = $issue.projectId
            ProjectName = $issue.projectName
            ProjectOrigin = $issue.projectOrigin
            ProjectType = $issue.projectType
            ProjectCreated = $issue.projectCreated
        }
    }
    return $csvData
}

# Function to save data to CSV
function Save-ToCSV {
    param(
        [array]$Data,
        [string]$FileName
    )
    
    if ($Data.Count -eq 0) {
        Write-Warning "No data to save for $FileName"
        return
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $filePath = Join-Path $OutputPath "$FileName`_$timestamp.csv"
    
    try {
        $Data | Export-Csv -Path $filePath -NoTypeInformation -Encoding UTF8
        Write-Host "Saved $($Data.Count) records to: $filePath" -ForegroundColor Green
    } catch {
        Write-Error "Failed to save CSV: $($_.Exception.Message)"
    }
}

# Main execution
Write-Host "=== Snyk Data Extractor (Fixed Version) ===" -ForegroundColor Cyan

# Test API connectivity first
if (-not (Test-SnykAPI)) {
    Write-Error "Cannot connect to Snyk API. Please check your token."
    exit 1
}

# Get organizations
$orgs = Get-Organizations
if ($orgs.Count -eq 0) {
    Write-Error "No organizations found"
    exit 1
}

# Determine organization to use
if (-not $OrgId) {
    if ($orgs.Count -eq 1) {
        $OrgId = $orgs[0].id
        Write-Host "Using organization: $($orgs[0].name)" -ForegroundColor Green
    } else {
        Write-Host "Multiple organizations available. Please specify -OrgId parameter:" -ForegroundColor Yellow
        foreach ($org in $orgs) {
            Write-Host "  Use: -OrgId '$($org.id)' for '$($org.name)'" -ForegroundColor White
        }
        exit 1
    }
} else {
    # Verify the provided OrgId exists
    $selectedOrg = $orgs | Where-Object { $_.id -eq $OrgId }
    if (-not $selectedOrg) {
        Write-Error "Organization ID '$OrgId' not found. Available IDs: $($orgs.id -join ', ')"
        exit 1
    }
    Write-Host "Using specified organization: $($selectedOrg.name)" -ForegroundColor Green
}

# Create output directory
if (!(Test-Path $OutputPath)) {
    New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null
}

Write-Host "`nOrganization ID: $OrgId" -ForegroundColor Cyan
Write-Host "Output Path: $OutputPath" -ForegroundColor Cyan

# Extract Projects
Write-Host "`n--- Extracting Projects ---" -ForegroundColor Magenta
$projects = Get-AllProjects -OrganizationId $OrgId

if ($projects.Count -gt 0) {
    $projectCSV = ConvertTo-ProjectCSV -Projects $projects
    Save-ToCSV -Data $projectCSV -FileName "snyk_projects"
    
    # Extract Issues
    Write-Host "`n--- Extracting Issues ---" -ForegroundColor Magenta
    $issues = Get-AllIssues -OrganizationId $OrgId -Projects $projects
    
    if ($issues.Count -gt 0) {
        $issueCSV = ConvertTo-IssueCSV -Issues $issues
        Save-ToCSV -Data $issueCSV -FileName "snyk_issues"
    }
} else {
    Write-Warning "No projects found. Cannot extract issues."
}

Write-Host "`n=== Extraction Complete ===" -ForegroundColor Cyan
Write-Host "Projects: $($projects.Count)" -ForegroundColor Green
Write-Host "Issues: $(if($issues) {$issues.Count} else {0})" -ForegroundColor Green
